{% extends '@EasyAdmin/page/content.html.twig' %}

{% block content %}
	<div
		class="container-fluid py-4">

		<!-- Cartes de rÃ©sumÃ© -->
		<div class="row">
			{% for card in [
            {'title': 'Produits', 'value': totalProduits, 'color': 'primary', 'url': urls.produits},
            {'title': 'Clients', 'value': totalClients, 'color': 'success', 'url': urls.clients},
            {'title': 'Fournisseurs', 'value': totalFournisseurs, 'color': 'info', 'url': urls.fournisseurs},
            {'title': 'Commandes Vente', 'value': totalCommandesVente, 'color': 'warning', 'url': urls.commandes_vente},
            {'title': 'Commandes Achat', 'value': totalCommandesAchat, 'color': 'danger', 'url': urls.commandes_achat}
        ] %}
				<div class="col-sm-6 col-md-3 mb-4">
					<div class="card text-white bg-{{ card.color }}">
						<div class="card-body">
							<h5 class="card-title">{{ card.title }}</h5>
							<p class="card-text fs-4">{{ card.value }}</p>
							<a href="{{ card.url }}" class="btn btn-light btn-sm">Voir</a>
						</div>
					</div>
				</div>
			{% endfor %}
		</div>

		<!-- Graphique Ã‰volution commandes -->
		<div class="row align-items-center mt-4">
			<div class="col-md-8">
				<h4>ðŸ“ˆ Ã‰volution des commandes</h4>
			</div>
			<div class="col-md-4 text-end">
				<select id="chartTypeSelector" class="form-select d-inline w-auto">
					<option value="line">Ligne</option>
					<option value="bar">Barres</option>
					<option value="radar">Radar</option>
				</select>
				<button class="btn btn-outline-secondary btn-sm ms-2" id="downloadChart">TÃ©lÃ©charger PNG</button>
			</div>
		</div>
		<div class="card mt-3">
			<div class="card-body">
				<canvas id="lineChart" height="100"></canvas>
			</div>
		</div>

		<!-- Comparatif ventes/achats -->
		<div class="card shadow mt-5">
			<div class="card-body">
				<h5 class="card-title">ðŸ“Š Comparaison ventes / achats</h5>
				<canvas id="barChart" height="100"></canvas>
			</div>
		</div>

		<!-- Paiements circulaire -->
		<div class="card shadow mt-5">
			<div class="card-body">
				<div class="d-flex justify-content-between align-items-center mb-2">
					<h5 class="card-title">ðŸª™ RÃ©partition des paiements</h5>
					<select id="yearFilter" class="form-select w-auto">
						{% for year in anneesPaiements %}
							<option value="{{ year }}" {% if year == anneeActuelle %} selected {% endif %}>{{ year }}</option>
						{% endfor %}
					</select>
				</div>
				<canvas id="pieChart" height="100"></canvas>
			</div>
		</div>

		<!-- Produits stock faible -->
		{% if produitsStockFaible is defined and produitsStockFaible|length > 0 %}
			<div class="card mt-5">
				<div class="card-body">
					<h5 class="card-title text-danger">ðŸš¨ Produits en stock faible</h5>
					<ul class="list-group">
						{% for produit in produitsStockFaible %}
							<li class="list-group-item d-flex justify-content-between align-items-center">
								{{ produit.nom }}
								<span class="badge bg-danger rounded-pill">{{ produit.stock }}</span>
							</li>
						{% endfor %}
					</ul>
				</div>
			</div>
		{% endif %}

		<!-- DerniÃ¨res commandes vente -->
		{% if dernieresCommandesVente is defined and dernieresCommandesVente|length > 0 %}
			<div class="card mt-5">
				<div class="card-body">
					<h5 class="card-title">ðŸ§¾ DerniÃ¨res commandes de vente</h5>
					<table class="table table-striped table-bordered">
						<thead>
							<tr>
								<th>Client</th>
								<th>Date</th>
								<th>Montant</th>
								<th>Statut</th>
							</tr>
						</thead>
						<tbody>
							{% for commande in dernieresCommandesVente %}
								<tr>
									<td>{{ commande.client.nom }}</td>
									<td>{{ commande.dateCommande|date('d/m/Y') }}</td>
									<td>{{ commande.montantTotal|number_format(2, '.', ' ') }}
										MAD</td>
									<td>
										{% if commande.etat == 'ValidÃ©e' %}
											<span class="badge bg-success">ValidÃ©e</span>
										{% elseif commande.etat == 'AnnulÃ©e' %}
											<span class="badge bg-danger">AnnulÃ©e</span>
										{% else %}
											<span class="badge bg-warning text-dark">{{ commande.etat }}</span>
										{% endif %}
									</td>
								</tr>
							{% endfor %}
						</tbody>
					</table>
				</div>
			</div>
		{% endif %}

	</div>

	<!-- Scripts -->
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		const ventes = {{ ventesParMois|default([])|json_encode()|raw }};
const achats = {{ achatsParMois|default([])|json_encode()|raw }};
let paiementsParEtat = {{ paiementsParEtat|default({})|json_encode()|raw }};

const labels = ventes.map(item => item.mois);
const ventesData = ventes.map(item => item.total);
const achatsData = achats.map(item => item.total);

const ctx = document.getElementById('lineChart').getContext('2d');
const ctxBar = document.getElementById('barChart').getContext('2d');
const ctxPie = document.getElementById('pieChart').getContext('2d');

let currentChart = null;
let pieChart = null;

function createChart(type) {
if (currentChart) 
currentChart.destroy();


const isRadar = type === 'radar';
const fill = type === 'line';

currentChart = new Chart(ctx, {
type: type,
data: {
labels: labels,
datasets: [
{
label: 'Commandes Vente',
data: ventesData,
borderColor: 'rgba(75, 192, 192, 1)',
backgroundColor: isRadar ? 'rgba(75, 192, 192, 0.3)' : 'rgba(75, 192, 192, 0.5)',
fill: fill,
tension: 0.4,
borderWidth: 2
}, {
label: 'Commandes Achat',
data: achatsData,
borderColor: 'rgba(255, 99, 132, 1)',
backgroundColor: isRadar ? 'rgba(255, 99, 132, 0.3)' : 'rgba(255, 99, 132, 0.5)',
fill: fill,
tension: 0.4,
borderWidth: 2
}
]
},
options: {
responsive: true,
plugins: {
legend: {
onClick: (e, legendItem, legend) => {
const index = legendItem.datasetIndex;
const ci = legend.chart;
const meta = ci.getDatasetMeta(index);
meta.hidden = meta.hidden === null ? ! ci.data.datasets[index].hidden : null;
ci.update();
}
}
},
scales: ! isRadar ? {
y: {
beginAtZero: true,
ticks: {
stepSize: 1,
precision: 0
},
title: {
display: true,
text: 'Nombre de commandes'
}
},
x: {
title: {
display: true,
text: 'Mois'
}
}
} : {}
}
});
}

function createPieChart(data) {
if (pieChart) 
pieChart.destroy();


const chartData = Object.keys(data).length > 0 ? data : {};
const getColor = (label) => {
const isVente = label.startsWith('Vente');
const isAchat = label.startsWith('Achat');
if (label.includes('PayÃ©')) 
return isVente ? 'rgba(40, 167, 69, 0.8)' : 'rgba(25, 135, 84, 0.8)';

if (label.includes('Partiel')) 
return isVente ? 'rgba(255, 193, 7, 0.8)' : 'rgba(255, 140, 0, 0.8)';

if (label.includes('ImpayÃ©')) 
return isVente ? 'rgba(220, 53, 69, 0.8)' : 'rgba(176, 42, 55, 0.8)';

return isVente ? 'rgba(108, 117, 125, 0.8)' : 'rgba(73, 80, 87, 0.8)';
};
const colors = Object.keys(chartData).map(getColor);

pieChart = new Chart(ctxPie, {
type: 'pie',
data: {
labels: Object.keys(chartData),
datasets: [
{
data: Object.values(chartData),
backgroundColor: colors,
borderColor: '#fff',
borderWidth: 2
}
]
},
options: {
responsive: true,
plugins: {
legend: {
position: 'right'
},
tooltip: {
callbacks: {
label: (context) => {
const total = Object.values(chartData).reduce((a, b) => a + b, 0);
const value = context.parsed;
const percent = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
return `${
context.label
}: ${
value.toFixed(2)
} MAD (${percent}%)`;
}
}
}
}
}
});
}

// Initialisation
createChart('line');
new Chart(ctxBar, {
type: 'bar',
data: {
labels: labels,
datasets: [
{
label: 'Commandes Vente',
data: ventesData,
backgroundColor: 'rgba(75, 192, 192, 0.6)'
}, {
label: 'Commandes Achat',
data: achatsData,
backgroundColor: 'rgba(255, 99, 132, 0.6)'
}
]
},
options: {
responsive: true,
plugins: {
legend: {
position: 'top'
}
},
scales: {
x: {
stacked: true
},
y: {
stacked: true,
beginAtZero: true,
ticks: {
stepSize: 1,
precision: 0
}
}
}
}
});
createPieChart(paiementsParEtat);

// Ã‰vÃ©nements
document.getElementById('chartTypeSelector').addEventListener('change', function () {
createChart(this.value);
});
document.getElementById('downloadChart').addEventListener('click', function () {
const a = document.createElement('a');
a.href = document.getElementById('lineChart').toDataURL('image/png');
a.download = 'graphique_commandes.png';
a.click();
});
document.getElementById('yearFilter').addEventListener('change', function () {
fetch (`/admin/paiements-par-annee/${
this.value
}`).then(response => response.json()).then(data => {
paiementsParEtat = data;
createPieChart(paiementsParEtat);
}).catch(error => console.error('Erreur lors du chargement des donnÃ©es:', error));
});
	</script>
{% endblock %}
